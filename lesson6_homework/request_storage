# создание таблицы
CREATE TABLE transactions (
    transaction_id UInt32,
    user_id UInt32,
    product_id UInt32,
    quantity UInt8,
    price Float32,
    transaction_date Date
) ENGINE = MergeTree()
ORDER BY (transaction_id);


# заполнение таблицы
INSERT INTO transactions (transaction_id, user_id, product_id, quantity, price, transaction_date) VALUES
(1, 101, 201, 2, 50.0, '2023-10-01'),
(2, 102, 202, 1, 150.0, '2023-10-02'),
(3, 103, 203, 3, 30.0, '2023-10-03'),
(4, 104, 204, 1, 200.0, '2023-10-04'),
(5, 105, 205, 2, 75.0, '2023-10-05'),
(6, 106, 206, 1, 100.0, '2023-10-06'),
(7, 107, 207, 4, 25.0, '2023-10-07'),
(8, 108, 208, 2, 120.0, '2023-10-08'),
(9, 109, 209, 1, 80.0, '2023-10-09'),
(10, 110, 210, 3, 40.0, '2023-10-10');


#Общий доход от всех операций:
SELECT SUM(quantity * price) AS total_revenue
FROM transactions;


#Средний доход с одной сделки:
SELECT AVG(quantity * price) AS average_revenue_per_transaction
FROM transactions;


#Общее количество проданной продукции:
SELECT SUM(quantity) AS total_quantity_sold
FROM transactions;


#Количество уникальных пользователей, совершивших покупку:
SELECT COUNT(DISTINCT user_id) AS unique_users
FROM transactions;


#Преобразование `transaction_date` в строку формата `YYYY-MM-DD`:
SELECT formatDateTime(transaction_date, '%Y-%m-%d') AS transaction_date_str
FROM transactions


#Извлечение года и месяца из `transaction_date`:
SELECT 
    toYear(transaction_date) AS year,
    toMonth(transaction_date) AS month
FROM transactions;


#Округление `price` до ближайшего целого числа:
SELECT round(price) AS rounded_price
FROM transactions;


#Преобразование `transaction_id` в строку:
SELECT toString(transaction_id) AS transaction_id_str
FROM transactions;


#Создание и использование UDF:
CREATE FUNCTION total_cost AS (quantity, price) -> quantity * price;

SELECT 
    transaction_id,
    total_cost(quantity, price) AS total_price
FROM transactions;

CREATE FUNCTION classify_transaction AS (total_price) -> if(total_price > 100, 'высокоценные', 'малоценные');

SELECT 
    transaction_id,
    classify_transaction(total_cost(quantity, price)) AS transaction_category
FROM transactions;